<heading>Introduction</heading><heading>Binary Trees</heading>Binary Tree is a data structure which has links to one or two of the same type of data structure, called left and right children, respectively. Children can be referred to as nodes. Binary tree may also have no links to any children. In this document the term node will be used. Each node can follow the similar pattern. So each node can form a subtree of it's own. The node which is at the top is called the root node. There are several types of binary trees, each with it's own property. The following explains the theory behind the following trees: <list>Binary Search TreeMax HeapAVL Tree</list>These theories were used as the basis to complete the incomplete modules of KnowItAll.pas. <heading>Binary Search Tree</heading>In a binary search tree each node's data value is always less or equal to it's own. And the right node's data value is always greater or equal to it's own data value In the worst case scenario data manipula has the order of O(n). <heading>Max Heap</heading>In a max heap each node's data value has the highest or equal value of it's children (left and right nodes). Therefore the root node has the highest (or equal to it's child node's) data value. A max heap should also satisfy the complete tree property. That is all nodes and filled from left to right (if the level is not complete). Therefore all levels are full or maximum of one incomplete level is possible. <heading>AVL Trees</heading>In an AVL tree the heights of the two subtrees differ by at most one. This should be true with all it's subtrees. If they differ by more than one then it is not considered to be a AVL tree. The advantage of an AVL tree is that data manipulation time in the worse case scenario has the order of O(log n) <heading>Design documentation</heading><heading>Program feedback features</heading>The program gived the maximum possible feedback. The program the reason whatever the answer is. If the user answer is correct it displays why it is correct. If the answer is incorrect it display why the answer is incorrect and the reasons why it is incorrect. If the tree has more than one error that makes the answer incorrect it pin point where the error is and what the error is. Psedocode on page: <table/> FORMULA   FORMULA   FORMULA   FORMULA   FORMULA   FORMULA   FORMULA   FORMULA   FORMULA  <figure/>Module Description (Psedocode) Module name: IsItABinarySearchTree()  FORMULA  Module name: IsItAMaxHeap()  FORMULA  Module name: IsItAnAVLTree()  FORMULA  Module name: checkifbinarytree()  FORMULA  Module name: checkifmaxheap()  FORMULA  Module name: getnodedata()  FORMULA  Module name: checkifnodenil()  FORMULA  Module name: checktreeheight()  FORMULA  Module name: checkifcompletetree()  FORMULA  Module name: checkifAVLTree()  FORMULA  <heading>Testing </heading><heading>Scope of testing</heading>Onlt the main three modules were tested. Other 'helper' modules in the program and called while running these modules. These modules were extensively tested while programming. The testing of those modules will only be done if actual errors are found. If so they will be debugged but no test documentation will be done. The main modules will be retested again to make sure there are no bug in the program. The test will only be forced on the correctness of the program. Other tests, for example stress and performance testing, are not done. The tests that involve where any child nodes equal to it's parents were not done. In the test cases the children themselves differ in value from each other. Therefor parens and the two children (if they exist) have distinct values. Only a single 2 level subtrees (i.e. parent,left node node and right node) were tested, except where more than two levels were required (such as height testing). The other subtrees, weather they are above, below, to the right or left were ignored. It is assumed that once the program get a single 2 level subtree correct it can get the whole structure correct after checking all the nodes. The min and max values of the three nodes (parent,left node and right node) were 98 and -6 respectively. Maximum depth (height) was 6 (levels). These were the original ranges in the program so the trees with only those conditions were tested. All the positive combinations of negative and positive values of a subtee was not tested to keep the test cases volume low. <heading>Objective of test plan</heading>The objective is to generate combinationssuch that its sufficent enough to test the correctness of the program without a large volume of test data or test cases. <table/><table/><table/><table/><heading>Test results</heading><heading>Binary Tree test results</heading><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><heading>Max heap - value test results</heading><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><heading>Max heap - complete tree test results *Since the node values are irrelevent to this tests, they were ommited.</heading><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><heading>AVL Tree test results *Since the node values are irrelevent to this tests, they were ommited.</heading><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/>