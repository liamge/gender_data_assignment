<heading>Project Planning</heading><heading>Introduction :</heading>According to Cardozo and de Villiers (1), there are seven basic stages in project planning: <list>Define project objectives.Define phases.Partition project effort and schedule across phases.Prioritise risks.Define milestones.Define iterations.Partition project effort and schedule across iterations.</list>We shall be using these seven stages, as described in the Cardozo and de Villiers guide, and the the IBM Rational Unified Process (RUP) as the basis for the project planning. In terms of conventions, all schedule will be measured in weeks and effort in person-hours. Weeks will in general run Friday to Thursday due to the project deadlines falling on Thursdays. <heading>Stage 1 - Define Project Objectives :</heading>Develop a Java application to model sets of racing data given a textual input file which will run on the version of Linux used in the Department of Computer Science. Use UML to design the application. Use systematic and comprehensive testing methods. Write clear and precise documentation. Complete the first section of the project (planning, requirements and basic analysis) by the 27 th January 2005. Complete the second section of the project (analysis, design, implementation, testing and documentation) by the 10 th March 2005. <heading>Stage 2 - Define Phases :</heading>For simplicity, we shall be using the 4 phases defined by the RUP model and detailed in the Cardozo and de Villiers guide. Inception: Covers project planning and basic requirements analysis. Elaboration: Covers requirements elicitation, analysis and test case design. Construction: Covers design, implementation and testing. Transition: Covers documentation creation (e.g. user manual) and final integration testing. <heading>Stage 3 - Partition Project Effort and Schedule Across Phases :</heading>RUP provides a guide to the effort and schedule required across the phases, which is as follows: <table/>There are a total of 10 weeks in which to complete the project, with certain restrictions being placed on the completion dates of certain parts (e.g. analysis - and therefore elaboration - must be completed within 4 weeks). There are various options for estimating effort, however most seem to require the team to have at least some previous experience working on similar projects, for example to estimate the LOC (Lines of Code) required for the program. As the team do not have any such experience, a very basic estimate of roughly 5 team members working for around 10 hours per week for the duration of the project, to give a total of 500 person-hours, was used. This can be updated as more information becomes available. Given these estimates, the following table showing how schedule and effort were partitioned across phases was created: <table/>The burn rate can be determined by dividing the number of person-hours by the number of weeks for each stage and is as follows: <list>Inception - 40 person-hours per weekElaboration - 40 person-hours per weekConstruction - 60 person-hours per weekTransition - 40 person-hours per week</list>This represents a roughly constant burn rate with a large increase in the construction phase, though this is to be expected as it is the most labour-intensive phase. It is still a reasonable increase - assuming each team member works ~10 hours per week, only two extra team members will be required for the construction phase. <heading>Stage 4 - Prioritise Risks :</heading>The main risks were identified with the help of chapter six of Pressman (2). Tight schedule: The schedule for the project is very short so any small variations in timings could have a disproportionate impact on the project. Lack of experience: The team have no experience of working on such a large project so the estimates for schedule/effort may not be terribly accurate. Misunderstandings: Team members may not understand exactly what is required at each stage, or insufficient information may be provided to gain a full understanding. Equipment failure: Computers are somewhat unreliable and prone to crashing which may lead to data loss. Multiple platforms/systems: As the application will be developed on various different platforms and systems, it may not run correctly when integrated. Unfamiliar development environment: As the team have limited experience working with GUIs the development environment will be unfamiliar and may take time to learn to use efficiently. Illness/injury: As the team is so small, a team member becoming ill or injured and therefore unable to work could have a serious effect on the project. These risks were then prioritised using the priority grid in the Cardozo and de Villiers guide. <list>Tight schedule (Probability: medium; Impact: high).Equipment failure (Probability: medium; Impact: high).Lack of experience (Probability: high; Impact: medium).Multiple platforms/systems (Probability: medium; Impact: medium).Unfamiliar development environment (Probability: high; Impact: low).Misunderstandings (Probability: low; Impact: high).Illness/injury (Probability: low; Impact: medium).</list><heading>Stage 5 - Define Milestones :</heading>Using the Cardozo and de Villiers guide as a starting point, milestones were identified and defined. <table/><heading>Stage 6 - Define Iterations :</heading>According to the Cardozo and de Villiers guide, iterations are generally created by partitioning phases so that there are one iteration in each of inception and transition and two in each of elaboration and construction. Details of each iteration are shown below: <table/><heading>Stage 7 - Partition Project Effort and Schedule Across Iterations :</heading>Following the Cardozo and de Villiers guide, the effort and schedule are repartitioned so that each elaboration and construction iteration has half the effort and schedule of the total phase: <table/><heading>Iteration Planning</heading><heading>Introduction :</heading>Again referring to Cardozo and de Villiers, there are eight basic stages in iteration planning: <list>Refine iteration objectives.Develop product breakdown structure.Develop evaluation criteria.Define iteration milestones.Partition effort across disciplines.Develop work breakdown structure.Staff team and assign work.Consolidate planning.</list>We shall be using these eight stages and the same conventions as in project planning as the basis for the iteration planning. <heading>Stage 1 - Refine Iteration Objectives :</heading>Although objectives have already been defined, it is necessary to define objectives for each iteration, and to refine these as more information becomes available as the project progresses. Inception: Produce project and iteration plan which can be used to coordinate the project and ensure progress is on track for completion in time. Ensure all team members have a basic understanding of the project requirements and objectives. Elaboration1: Define requirements and ensure whole team know and understand what is required of them. Create use cases, static and dynamic analyses and document process and outcomes. Elaboration2: Refine initial analysis to remove any inconsistencies. Define test cases to be used by test team. Construction1: Produce component and GUI designs. Achieve proficiency with the development environments to be used. Develop initial software release. Construction2: Produce test plan. Refine initial release to remove obvious bugs and to improve quality. Test software components and begin basic integration testing. Transition: Produce user manual. Complete integration testing to ensure software meets requirements and is reliable and of high quality. <heading>Stage 2 - Develop Product Breakdown Structure :</heading>The product was broken down into the following artefacts: <table/><heading>Stage 3 - Develop Evaluation Criteria :</heading>The evaluation criteria listed below have been adapted from the Cardozo and de Villiers guide. Requirements: Is the requirements set complete? Are all inconsistencies resolved? Analysis & Design: Is the set of use cases complete? Are the static and dynamic models complete? Does the design cover all identified components? Is the design of a suitably high quality to satisfy the requirements? Implementation: Has a working build been delivered to the test team? Is code properly documented (e.g. with comments within the code)? Has design model been followed and, if not, have any changes been documented? Test: Have all the requirements of the program been met? Is the build reliable and of a high quality? Have all test cases been executed? Have test results been analysed and documented? Deployment: Has a user manual been developed? Project Management: Have the project and iteration plans been updated as new estimates are available? <heading>Stage 4 - Define Iteration Milestones :</heading>Having previously defined milestones for phases (in the project plan), iteration milestones can be defined. <table/><heading>Stage 5 - Partition Effort Across Disciplines :</heading>Effort will be roughly partitioned as follows: <table/><heading>Stage 6 - Develop Work Breakdown Structure :</heading>Having set out the milestones and effort for each discipline, a precise work breakdown structure was created, based on the Cardozo and de Villiers guide. <table/><heading>Stage 7 - Staff Team and Assign Work :</heading>The project team was divided as follows: <table/><heading>Stage 8 - Consolidate Planning :</heading>The Cardozo and de Villiers guidelines for consolidating planning suggest using the following questions to check that planning is complete: Are the deliverables consistent with the iteration objectives? Deliverables for each iteration are consistent with the iteration objectives. Are the iteration evaluation criteria consistent with the iteration objectives? Iteration evaluation criteria are based on iteration objectives and so are consistent. Are the milestones consistent with the deliverables? Phase and iteration milestones are consistent with phase and iteration deliverables. Are the activities consistent with the deliverables? Many activities have been specified to ensure that deliverables are created, therefore activities and deliverables are consistent with each other. Have all significant differences between top-down and bottom-up estimates of effort been resolved? As a formal method of estimating effort was not employed, only one estimate was used. This estimate will be updated as more data becomes available as the project progresses. Does the team constitution reflect the required amount of effort per discipline? The number of team members assigned to each task accurately reflects the amount of effort estimated for each discipline. Therefore, as each planning objective has been achieved, the initial plan is complete. However, as effort and schedule estimates improve, the plan will need to be updated an adjusted accordingly. 