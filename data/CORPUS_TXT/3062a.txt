<heading>Test data and expected results</heading><heading>Test data 1</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>If the program works correctly, I would expect the results to be as follows: <list>Total of all numbers: 1000Total of all negative numbers: 0Total of all positive numbers: 1000</list>However, I want to test the algorithm with extremes of numbers that can be entered and accepted. <heading>Test data 2</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>The results should be as follows: <list>Total of all numbers: -1000Total of all negative numbers: -1000Total of all positive numbers: 0 </list>As mentioned above, I want to test the algorithm with extremes of numbers. <heading>Test data 3</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>If working correctly, the program should display as follows: <list>Total of all numbers: 0Total of all negative numbers: -500Total of all positive numbers: 500</list>The numbers chosen here could expose a flaw in the algorithm as the total should be '0' but the other totals equal in weighting. <heading>Test data 4</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>These numbers should test the number check section of code, i.e. only accepting numbers between -100 and +100. Note that the numbers in the brackets are what was entered after the numbers out of range. Expected results: <list>Total of all numbers: 357Total of all negative numbers: -199Total of all positive numbers: 556</list><heading>Test data 5</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>In my code there is no mention of 'if number = 0' so it would be worth while checking what would happen if this was input. Expected results are as follows: <list>Total of all numbers: 0Total of all negative numbers: 0Total of all positive numbers: 0</list><heading>Test data 6</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>As before, there is no mention of '-0' in the code. This time, the fact it is input as -0 (no such number...?) may expose an error. I think the program might display the results as '-0'. Expected results: <list>Total of all numbers: 0 Total of all negative numbers: 0 (possibly '-0')Total of all positive numbers: 0</list><heading>Dictionary of variables</heading><list>Name: CounterType: Integer</list>Description: My program makes use of a 'while' loop. To count the required loops, and to keep track of the current number, I use this variable to store an integer that increments by one with every loop. Note that 'Counter' is given the value of '1' before the while loops starts-this is to ensure the correct number of loops and to indicate what the current number is at the start of the program. <list>Name: NumberType: Integer</list>Description: This variable stores the input of the user, i.e. numbers one through to ten. To keep the amount of coding down and to simplify the program, I chose not to have a variable for every number entered (Num1, Num2, Num3 etc.). Instead, this variable stores the number input, adds to the appropriate totals and then is recycled to store the next number. <list>Name: TotalType: Integer</list>Description: In order to make the program user friendly and easy for someone else to understand, I chose variables with names that closely resemble their purpose. Thus, variable 'Total' stores the sum of all numbers entered. <list>Name: TotalNegType: Integer</list>Description: As mentioned above, the name of the variable matches its purpose. This variable holds the total of all negative numbers input. <list>Name: TotalPosType: Integer</list>Description: This variable holds the total of all positive numbers input by the user. <heading>Stepwise refinement</heading>1. Initialise variables. 2. Prompt user to enter ten numbers, and check they are within correct number range. 3. Keep running totals of all numbers entered, all negative numbers and all positive numbers. 4. Print results.  FORMULA  <heading>Delphi program code</heading> FORMULA  <heading>Results</heading><heading>Test data 1</heading><heading>Data entered</heading> FORMULA  <heading>Actual results</heading>The program functioned correctly. Actual results as follows: <list>Total of all numbers: 1000Total of all negative numbers: 0Total of all positive numbers: 1000</list><heading>Test data 2</heading><heading>Data entered</heading> FORMULA  <heading>Actual results</heading>Program functioned correctly. Actual results as follows: <list>Total of all numbers: -1000Total of all negative numbers: -1000Total of all positive numbers: 0 </list><heading>Test data 3</heading><heading>Data entered</heading> FORMULA  <heading>Actual results</heading>Program functioned correctly. Actual results as follows: <list>Total of all numbers: 0Total of all negative numbers: -500Total of all positive numbers: 500</list><heading>Test data 4</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>Program functioned correctly. Actual results as follows: <list>Total of all numbers: 357Total of all negative numbers: -199Total of all positive numbers: 556</list><heading>Test data 5</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>Program functioned correctly. Actual results as follows: <list>Total of all numbers: 0Total of all negative numbers: 0Total of all positive numbers: 0</list><heading>Test data 6</heading><heading>Data entered</heading> FORMULA  <heading>Expected results</heading>Program functioned correctly. Actual results as follows (Note that the program did not display the results as '-0' as I thought it might): <list>Total of all numbers: 0Total of all negative numbers: 0Total of all positive numbers: 0</list>The only problems encountered with my program are superficial. For example, when a very large integer number is entered, the program crashes-this could be seen a fault of Delphi rather than my program, in that an integer has to be in the range -32,768 to 32,767. I believe that if the variables were changed from integer to real (floating point) this problem would be less of an issue as the number range is far larger. However, I have not tested this so don't know it to be true. In addition, the screen can become slightly cluttered when numbers outside of the range are entered repeatedly, though by keeping track of which number the user is currently inputting, the program remains relatively clear and user friendly. 