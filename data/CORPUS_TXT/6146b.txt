<abstract><heading>Summary</heading>This report outlines a digital filtering solution which performs a 3 rd order Butterworth filter of cut-off frequency 4kHz, with sampling rate of 44.1kHz. A model of the system, including ADC/DAC has been produced using Matlab and Simulink. Using this model the step, impulse and frequency responses of the system have been plotted, and verified. The system has been tested with real audio, and C code for the filter has been created. </abstract><heading>1. Introduction</heading>The work presented here is a digital filtering solution for the company's recently prototyped speech compression system. It is a 3 rd order low pass filter to attenuate the white noise above the speech bandwidth, which comes from the noisy environment in which the system is to be installed. <list><heading>Specifications:</heading>3 rd Order Butterworth - gain will be 3dB down at the cut off frequencyCut-off frequency = 4kHzSampling rate = 44.1kHzReceives input from the ADC (bipolar 8-bit 2's complement integer value)Outputs to the DAC (bipolar 8-bit 2's complement integer value)</list>Filters such as the above are very commonplace, and easy to design using the process outlined in this report. <heading>2. Design Procedure</heading><heading>2.1. S domain Butterworth transfer function</heading>The starting point of any Butterworth filter design is a normalised polynomial in the s domain, readily available in tables. The normalised 3 rd order butterworth response is defined as  FORMULA  The polynomial is split into two sections, one first order and one second order. These are denormalised by replacing s with  FORMULA .  FORMULA  The desired cut-off frequency is 4kHz, therefore  FORMULA  <heading>2.2. Z domain transfer function</heading><heading>2.2.1. Bilinear Z Transformation</heading>The S domain is only appropriate for functions which occur in continuous time. Since this is a digital filtering system a discrete time domain, the Z domain, must be used. The domains are very closely linked, and there is an easy transformation between the two, the bilinear z transformation (BZT). The BZT is applied using Tustin's map:  FORMULA  When this mapping is applied to a filter design the cut-off frequency becomes slightly warped. To correct this, the angular frequency ( FORMULA ) to be used in the calculations must be pre-warped. The pre-warped angular frequency is denoted by :  FORMULA  Using the  FORMULA  calculated above of 25133:  FORMULA  <heading>2.2.2. First order stage</heading> FORMULA  The BZT is applied, using Tustin's map:  FORMULA   FORMULA  This is the Z domain transfer function. <heading>2.2.3. Second order stage</heading> FORMULA  Again the BZT is applied, using Tustin's map.  FORMULA  This is the Z domain transfer function. <heading>2.3. C code implementation</heading><heading>2.3.1. Difference equations</heading>A Discrete filter can be described by a difference equation, relating the current output to multiples of current and previous inputs, as well as previous outputs. This representation makes software implementation, such as the C code implementation required here, straightforward. The difference equation is obtained from the Z transfer function, using the conversion:  FORMULA  <heading>2.3.2. First order stage</heading> FORMULA  Applying conversion:  FORMULA  Resulting C code  FORMULA  <heading>2.3.3. Second order stage</heading> FORMULA  Applying conversion:  FORMULA  Resulting C code:  FORMULA  <heading>3. Testing</heading><heading>3.1. Simulink model</heading>A model of the system was created using Matlab and Simulink, in order to prove that the design meets the specification at each stage. <figure/><heading>3.2. ADC/DAC</heading>In order to later test the filter with 'real' WAV audio the model must include the ADC and DAC, Simulink has no block called ADC or DAC, so an alternative arrangement must be used to simulate the effect that they would have on the signal. As laid out by the specifications, the ADC is 8-bit, bipolar, and uses 2's complement. Therefore the ADC has 256 possible output levels, between -128 and 127. To simulate these levels, the input must be multiplied by 128 and then rounded to the nearest integer (as shown in Fig. 3.2). This arrangement will actually produce levels between -128 and 128, but this error can be ignored. The DAC can be modelled in a very similar way. <figure/>Using this system model the step, impulse and frequency responses can be plotted and used to see the loss in performance caused by the ADC/DAC. <heading>3.3. WAV audio</heading>To really test the system beyond doubt, it must be fed with a signal comprised of recorded speech combined with white noise. All the tools are available in Simulink to do this. The system model is shown in fig. 3.3. Samples from the WAV file must be unbuffered before they can be passed into the filter (i.e. one sample at a time). They must then be buffered again before being passed to the Spectrum Scope, which performs an FFT. The input source is a test file, speech.wav, combined with a reduced level of random noise. The output of the DAC is also passed to the pc soundcard so that the filtering action can be heard, and compared to the noisy original. <figure/><heading>4. Test Results</heading><heading>4.1. Z domain transfer functions</heading>The step, impulse and frequency responses of the Z domain transfer function developed in section 2.2. have been tested. Fig 4.1.1 and 4.1.2 prove that the transfer function exactly mimics an analogue Butterworth filter with the same specifications. The only difference is that the digital response can be seen to be discrete in both magnitude and time, as expected. <figure/><figure/>The frequency response fits the requirement also. In fig 4.1.3, the cut-off frequency (3dB down) can be seen to be at 4000Hz. <figure/><heading>4.2. ADC/DAC</heading>With the ADC and DAC included in the system model, the step and impulse responses have been tested again. The step response (fig 4.2.1) appears to remain relatively unaffected by the introduction of the ADC and DAC. However, the impulse response (fig 4.4.2) has clearly been affected. The signal has trouble settling to a final value, which will introduce 1 LSB-worth of noise. <figure/><figure/>It is clear that the inclusion of the ADC and DAC has changed the frequency response of the filter, see fig. 4.2.3. There are some large ripples introduced in the stop band, and the attenuation never goes below -60dB, unlike fig. 4.1.3 where the attenuation slopes down past -150dB. There is also a slight attenuation in the pass band of about -2dB. This should ideally be corrected, but unfortunately design time was not sufficient. <figure/><heading>4.3. WAV audio</heading>The figures in this section compare the unfiltered input with the filtered output, to show the effect that the new digital filter is having. As expected, the filter cannot remove all of the noise (since it is random and occurs at all frequencies). This is seen in fig 4.3.2. However, fig. 4.3.4 shows that it does reduce the high frequencies, as required. <picture/><picture/><picture/><picture/><heading>5. Conclusions</heading>Listening to the output of the filter through headphones clearly demonstrates that this filtering solution is not perfect. However, it is a compromise between performance and complexity. Due to the simplicity of the C code required, this filtering solution can be added in to DSP processor in the prototype without changing the hardware at all. This is very important in reducing design and manufacturing costs. The filter designed here only attenuates the high frequencies which are not required in speech. However, these frequencies are most harsh on the human ear, and the benefit is instantly noticeable. 