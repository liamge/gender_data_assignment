<heading>Introduction and Capabilities</heading>This is a compiler; implemented in C++, which compiles C code into C compatible three-address code. It takes as a parameter the filename of a source file, and outputs both to the screen and to the file "output.txt". If the code compiled successfully, the compiler will return a 0, otherwise it will return a 1. The compiler's scope currently is the declaration of integer variables with user specified names, the functions in() and out(), and any assignment to a variable of an expression containing variables and/or positive and/or negative integers connected with (, ), +, -, *, /, ++, +=, -- and/or -=. White space, including new lines and tabs, is stripped. From this, it generates C three-address code using temporary variables, which is then put recursively through 8 levels of optimisation. Both outputs of this (screen and file) are separated back out with new lines to make it easier for the user to read. <heading>Brief Code Description</heading>The code is split up into source files, each with a header. The header contains global variables, definitions and function prototypes. The comments explaining the purpose of each of these are located in the header file, not in the source code. P.T.O Here, briefly, are the important points in the flow of control through the program: <figure/><heading>Test Strategy</heading>I tested the program many hundreds of times throughout the coding to test every new piece of code. Therefore by the end of the code writing process I was able to be fairly sure that the compiler worked. I still ran 15 tests of the compiler both with and without optimisation to verify that the compiler does indeed work. All of these tests were successful. Some of the results follow. <heading>Test Results</heading><heading>Test lexical analysis</heading>Input:  FORMULA  Output 1 (without optimisation): <picture/>Output 2 (with optimisation): <picture/>Result: By following through the input, one can see that both outputs are equivalent to it. As the code was designed to be a strenuous test to the lexical analyser, its success is valid. <heading>Testing parsing. </heading>Input:  FORMULA  Output 1 (without optimisation): <picture/>Output 2 (with optimisation): <picture/>Result: You can mentally convert the input code to output 1 successfully, therefore the parsing, and especially the postfix code seems to work. Manual calculation confirms that the code should output - 42, so both parts of the test were a success. <heading>Testing optimisation as a whole. </heading>Input:  FORMULA  Output: <picture/>Result: This code was the code used as an example of optimisation in the notes. It therefore tests every stage of optimisation. I did not use it as an input for any tests while writing the code. Apart from the names of the variables, the result is exactly that of the notes, therefore the test is a success. <heading>Code</heading>Please see separate attachment. 