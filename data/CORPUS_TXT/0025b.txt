<abstract><heading>Summary</heading>The purpose of this assignment is to demonstrate the use of an Analogue-to-Digital-Converter on the development board, and the use of a temperature transducer/heater on the teaching rig. One of the microcontroller analogue inputs is connecting to the temperature transducer, after the transducer receiving an analogue input signal, the heater turns on so the temperature changes. ADC is used to convert the analogue signal into digital signal and then display the temperature in the digital form on the LCM display. The hardware elements featured in the experiment are the microcontroller I/O ports, ADC, temperature transducer/heater combination and LCM display. </abstract><heading>Operation </heading>A program is already given demonstrating how the ADC is used to show the digital output on the LCM display. According to the diagram of M16C teaching rig, we set port 10.1 of the development board connecting to the temperature transducer as input, port 10.2 as output. Then we set A-D control registers to enable the ADC and start converting. After debugger, 73 can be seen shown on the LCM. If we warm up the transducer by putting a finger on it, the value on the LCM goes up slightly. This number is linearly proportional to the Celsius (Centigrade) temperature. Therefore, some modifications can be done to the program to display the actual temperature in the Celsius format (x°C). We know that the ADC input range is 0-5V, the following equation is derived to give the temperature of the transducer in terms of the ADC output: display = (((ADC/5)*0.0196+0.5)/0.01) The amplifier of the transducer has a gain of 5, so ADC/5 is used to eliminate the gain; The output range is between 0 to 255 (2 to the power of 8). This is because there are 8 independent analogue inputs. The input voltage is 0-5V, as a result, there is 0.0196V per output. (ADC/5)*0.0196 is to give the output voltage; 0.5°C is the temperature accuracy guaranteeable; The linear propagation is 10.0mV/°C scale factor. Therefore Vout/10mV finally gives the temperature value in Celsius format. There is another requirement of this assignment which is to keep the transducer at a temperature of 30°C that should be measured and displayed continuously. Here, the program functions as a simple on-off temperature controller. To do this is simply to add if statement to control the temperature sensor and display. Since the output has already been converted into Celsius format hence we can output the value 30 below straightforward. If the temperature is not reaching 30°C, the heater will keep warming up until the temperature reaches 30°C, then the heater stops warming up. <quote>if(display>30) /*If temperature is greater than 30*/ { P10.2 = 0; /*Turn the heater off*/ } if(display<30 ) /*If temperature is less than 30*/ { P10.2 = 1; /*Turn the heater on*/ }</quote>After this, we need to show the 'hundred', 'tens' and 'unit' values of the output. These are simply as we have already done this in the second experiment. In the program, to display the 'hundred' part is not necessary since we have already known that temperature cannot large than 30°C . However, not only displaying the output values, we also need to show the temperature unit symbol after the value. Symbol °and character C can be found from ASCII code respectively ° is given by the following hex code: DF <quote>send (16+((0xDF>>4)&0x0f)); send (16+(0xDF&0x0F)); C is given by the following hex code: 43 send (16+((0x43>>4)&0x0f)); send (16+(0x43&0x0F));</quote>so, a complete output is shown on the LCM including the temperature value in Celsius format and the unit symbol. <heading>Discussion and Conclusion</heading>LM35 temperature sensor used in this experiment has an important feature; that is its output voltage is linearly proportional to the Celsius temperature. By knowing this feature, we can convert temperature in digital format into Celsius format. We could use other hardware elements on the teaching rig to improve this experiment. For example, we can use the red, green and yellow LEDs to indicate if the temperature is above or below 30°C. This is easier to observe the result as we could just see if the LED lights rather than watching the LCM every time. First of all, set I/O ports of the microcontroller connecting to the LEDs, then in the if statement which is keeping the temperature at 30°C, we can add some code, such as if temperature is less than 30°C, red LED lights; if temperature is greater than 30°C, green LED lights. Also, we can use buzzer or other hardware elements to improve the program. The accuracy guaranteeable is 0.5°C. I executed the program for several times, normally the number on the LCM stays at 31°C, just once, it stays at 30°C. As a result, error is greater than the guaranteed accuracy. When the temperature reaches 30°C, the heater turns off, but the heater is still warm, so it may increase the temperature so the LCM usually display 31°C. 