<heading>Introduction</heading>The experiment was carried out using a Mitsubishi M16 microcontroller and IER Embedded Workbench. The given incomplete code which was written in C was completed, then debugged using C-Spy and executed via the hardware. This procedure was used to control one of the two 7-segmant LED displays to display a clockwise rotational pattern, all segments simultaneously and decimal point. Then the pattern starts again. <heading>Procedure</heading>First the IER Embedded Workbench is opened and a new project is opened. This program supports the Mitsubishi M16 microprocessor. Then the created project is set to default factory settings after choosing ICCM16C and X-Link in the project options. The program C-Spy was chosen as the debugger. Then in the project files the incomplete C code, .xcl file and .s34 file was selected. Then the incomplete C code was opened and the missing codes were entered. The M16C development board was then connected to the power supply and the PC via the serial link. Then the circuit board was switched on and .s34 and .xcl files were added to the project. The C-Spy was run as the debugger and the program was executed in the ROM monitor mode via the M16 development board. Then a clockwise rotational pattern display, simultaneous all segment display and the decimal point display could be observed repeatedly on the first 7-segment LED display. <heading>Problems encountered in Completing the missing codes in the C program Code:</heading>Even though there was a slight problem with figuring out the missing hex codes for the right LED segments, after studying the hex code to binary code conversion and the pattern in the unsigned char display codes it was easy. The rest of the missing codes were straight forward but there was a code missing in the main loop with out the 'missing code' sign. The other difficulty was that the C file (ass2.c) provided was a corrupted file and could not be opened using the project in the IER workbench software. The C code had to be opened in Microsoft Visual Studio the copied to the C file in the IER Workbench. <heading>Basic Hardware Configuration</heading><table/>There are two seven segment displays which are both connected to P 0 input/output port.P 0 is a 8-bit input/output port and the direction of the port is configured by PD 0(8-bit register) so each bit can be individually set to input or output. The 8 pins in the port map on to the 7 segment display and the decimal point according to the table above. These pins first go through a buffer IC to power the LEDs on the display. <heading>Display Codes</heading>The bit patterns to display different segments in the display are defined in the program as 8 bit hex numbers and the table bellow displays the 8-bit hex numbers and their corresponding numbers in binary. <table/><heading>Commented program with missing codes (ass2.c)</heading><quote>/* Filename:Ass2i.c This program is written for the M16C/62 microcontroller embedded in the Mitsubishi M16C/62development board. It keeps a moving one segment clockwise on LED1 then outputs all segment the decimal point then starts again from segment a. */ #define Chip_3062x #include "stdio.h" #include "iom16c62.h" /* Define the lookup table for the LEDs in terms of bytes related to the seven segments */ unsigned char dis_code [10] = { 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0x00, 0x00}; // (part of the hex code was missing), the codes refer to different parts of the 7-segment display. // FE=11111110 //FD=11111101 //FB=11111011 //F7=11110111 //EF=11101111 //DF=11011111 //BF=10111111 //7F=01111111 //00=00000000 //00=00000000 int count; /* Delay function */ void wait (unsigned long delay) { while (delay !=0) // this loop will continue till delay is not equal to zero delay--; // the value of delay is reduced by 1 } void main(void) { /* Set the direction of all port 0 bits to output. */ PD0 = 0x0FF; // (this was a missing code), the direction is set to output in port 0 bits /* Set the direction of the LED enable to output. */ PD1.0 = 1; // (this was a missing code), the direction of the LEDs set to output PD1.1 = 1; /* Set port0 bits to "1" */ P0 = 0x0FF; // (this was a missing code), port 0 bits set to 1 P1.0 = 1; // displays are turned off P1.1 = 1; count = 0; // the count is initialised while (1) // this loop continues till infinity { { P0 = dis_code[count%10]; // remainder resulting from dividing count by 10 P1.1 = 1; // would light the first LED P1.0=0; wait( 100000 ); // this delays the process by 0.1 secs count++; // increases count } } }</quote>