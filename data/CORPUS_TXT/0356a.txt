<heading>Introduction</heading>The experiment was carried out using a Mitsubishi M16 microcontroller and IER Embedded Workbench. The given incomplete code which was written in C was completed, then debugged using C-Spy and executed via the hardware. This procedure was used to control two 7-segmant LED displays to display a count when SW1 and SW2 (switch 1 & 2) are pressed. First part was to complete the incomplete code to display an increasing count when SW1 is pressed where the 'tens' are displayed on LED 1 and 'units' are displayed on LED 2. The second part of the lab was to add a new section to the completed code to decrease the count when SW 2 was pressed. <heading>Procedure </heading>First the IER Embedded Workbench is opened and a new project is opened. This program supports the Mitsubishi M16 microprocessor. Then the created project is set to default factory settings after choosing ICCM16C and X-Link in the project options. The program C-Spy was chosen as the debugger. Then in the project files the incomplete C code, .xcl file and .s34 file was selected. Then the incomplete C code was opened and the missing codes were entered to display a count (Modulo 100) in the LED displays ('tens' are displayed on LED 1 and 'units' are displayed on LED 2) when SW 1 was pressed. The M16C development board was then connected to the power supply and the PC via the serial link. Then the circuit board was switched on and .s34 and .xcl files were added to the project. The C-Spy was run as the debugger and the program was executed in the ROM monitor mode via the M16 development board. Then a count was carried out in the microcontroller (modulo 100) when SW 1 was pressed. This count was displayed on the LED displays. Then the continuous step function was aborted and the code was modified to reduce the count when SW 2 was pressed. The C-Spy was then run as the debugger and program was executed in the ROM monitor mode via the M16 development board. Then this function was displayed on the LED displays. <heading>Problems encountered in Completing the missing codes in the C program Code and steps taken:</heading>When the code was opened in the project window, some of the main syntax at the very beginning of the code was in a different format and had to be changed. When the 'PD' terminals were defined in the main body of the program it was defined as "PD = 0x0FF", and it was supposed to be "PD0 = 0x0FF". Therefore this had to be changed. A new 'if' function had to be added to the while loop to decrease the count when the SW 2 was pressed. This function was the same as the function that does the increasing count but the specific codes for the switches and a few other codes had to be changed to achieve the required action. When displaying these counts on the LED displays both the displays had to be selected and deselected and count function had to be changed from '%' to '/' for the decreasing count. <heading>Basic Hardware Configuration</heading>The M16 development board contains circuit components such as 3 switches (SW 1-3) and a 4 th switch for reset purpose, a 9-way serial port for communication with the computer, crystals for clocking purposes, a 96-way communication port for the microcontroller, two seven segment LED displays etc. <list><heading>List of hardware available in the development board:</heading>4 Push-to-make switches SW1-4; SW1-3 provides digital inputs and SW4 provides Reset function.2 x 7-segment display devices; LED1-2.Potentiometer R24/VR1; provides variable (0-5V) dc input to ADCO.9-way IDE connector CN1 for serial communication with a PC.96-way connector CN4 to I/O pins of microcontroller.Dc power input connectors; CN3(5V), CN2(8-12V).Various configuration jumpers.16MHz & 32.768KHz crystals for the main and sub- clock circuits respectively.</list>There are two seven segment displays which are both connected to P 0 input/output port. P 0 is a 8-bit input/output port and the direction of the port is configured by PD 0(8-bit register) so each bit can be individually set to input or output. The 8 pins in the port map on to the 7 segment display and the decimal point according to the table below. These pins first go through a buffer IC to power the LEDs on the display. <table/><picture/><heading>Completed, Modified and commented C program code- (Assl3i.c)</heading><quote>#define Chip_3062x #include "stdio.h" #include "iom16c62.h" Unsigned char dis_code [10] = { 0x0C0, 0x0A4, 0x0B0, 0x99, 0x92, 0x82, 0XF8, 0x80, 0x98 }, /* this defines an array with hexadecimals to display the results on the LED display*/ Count; /* initialises the variable 'count' */ Void wait (unsigned int delay) { While (delay !=0) /* while delay is not equal to zero the the value of delay is decreased */ Delay--; } Void main (void) /* no values are returned*/ { PD0 = 0x0FF; /* set all port 0 bits to output*/ PD1.0 = 1; /* this controls LED 1 and sets P1.0 to output*/ PD1.1 = 1; /*this controls LED 2 and sets P1.1 to output*/ PD8.2 = 0; /* port 8 bit 2 to input and controls SW1*/ PD8.3 = 0; /* port 8 bit 3 to input and controls SW 2*/ P0 = 0x0FF; /* port 0 to output*/ P1.0 = 1; /* LED 1 switched off*/ P1.1 = 1; /* LED 2 switched off*/ While (1) /* an infinite loop as long as the condition is true*/ { If (P8.2 == 0) { Wait (10000); /* passing time to display results on LEDs*/ If (P8.2 == 0) { ++count % 100; /* increase the value of count*/ While (P8.2 == 0); /* a loop while port 8 bit 2 is zero*/ Wait (10000); } } { If (P8.3 == 0) { Wait (10000); If (P8.3 == 0) { - - count % 100; /* decrease the value of count*/ While (P8.3 == 0); /* a loop while port 8 bit 3 is equal to zero*/ Wait (10000); } } P0 = dis_code [count % 10]; /* display 'units' in LED 2 from 0 to 9*/ P1.1 = 0; /* turn on LED 2*/ P1.1 = 1; /* turn off LED 2*/ P0 = dis_code [count / 10]; /* display 'tens' in LED 1 from 0 to 9*/ P1.0 = 0; /* turn on LED 1*/ P1.0 = 1; /*turn off LED 2*/ } }</quote><heading>Conclusion</heading>The lab was challenging in the very beginning when the code had to be modified to display the tens and units in the two LEDs, but the goals were achieved after a few changes. The lab improved my knowledge of the coding and actual working of the M16 development board. 