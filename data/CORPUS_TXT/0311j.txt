<heading>Introduction</heading>This module had four assessed assignments, each completed fortnightly. The main programming language for me was Fortran 95. The programs were compiled using either the 'IntelÂ® Fortran Compiler' or where MPI was required, the 'Portland Group PGI Compiler'. For assignment 4, Python 2.4 was used to write the GUI to interface to the compiled Fortran code. The intended outcome of the assignments was to find the minimum energy configuration of a set number of 'atoms' experiencing a mutual Lennard-Jones interaction of form  FORMULA . This was achieved using Monte Carlo methods to pseudorandomly shift the position of each atom and see if the energy was acceptable according to a Boltzmann distribution, with energy proportional to  FORMULA . From this you can understand that the temperature of the system, T, is an important parameter in that it has a large effect on the outcome (and energy) of the configuration. <heading>Assignment 1</heading>The program picks four random positions for the atoms inside a suitably sized sphere. The energy of this state is calculated using two loops to find the distance between distinct pairs of atoms and putting this distance into the Lennard-Jones potential model. This energy was summed over all distinct bonds. Every atom (four in this case) is in turn moved slightly (within  FORMULA  of its original location) in a random direction and the energy recalculated for this new state. If the energy is favourable then the change is accepted, else the atom is placed back. At the end, the program returns the final energy per atom along with how many moves were accepted. The final configuration is also written to disk in xyz format, so as to be read by external programs. For these 4 atoms, looping 500,000 times with  FORMULA  and  FORMULA the average acceptance ratio was 78% and average final energy was -0.72 per atom. This energy is normalised so that the minimum energy a 'bond' between two atoms can have is -1. The computing facilities (2.6 GHz Pentium4 Xeon with 2 GB of memory) were provided by the Centre for Scientific Computing of the University of . <heading>Assignment 2</heading>The program was modified to output the energy per atom averaged over the last 90% of the moves loop as well as just returning the energy of the final configuration. Also the energy change caused by the shifted atom was calculated more efficiently by only summing over the bonds that actually moved. These changes were tested and shown to give compatible results with assignment 1. OpenMP was then added to the code. The two DO loops that calculate the energy (the full and efficient versions) were parallelized with a static schedule. In tests on multi-processor machines this schedule was the quickest followed by guided and finally dynamic. <figure/>Further testing showed that the Parallelized (Static, 1) schedule overtook the Serial code for atom amounts n>37. Simulated annealing was introduced to the code. The 'temperature' variable was reduced over 50 iterations from 1 to 0.00001 according to the equation  FORMULA , where m is the iteration number. Correspondingly, the maximum small change each atom could be shifted by was calculated to be  FORMULA . Each iteration ran the entire Monte Carlo procedure, taking in the configuration that the last iteration arrived at. The temperature, value of  FORMULA , acceptance rate, average energy for 90% of the run and final energy were printed. By the end of this annealing procedure the atoms were in a minimum energy state. For n=4, the atoms were in a tetrahedral shape with atomic spacing ~1.122, the length ( FORMULA ) that corresponds to the minimum potential -1. The average energy was -1.499993 per atom. For n=13, the atoms formed an icosahedron with a single atom at the centre of the shape. The average energy was -3.409741 per atom. The results were reproducible. <picture/><figure/>The 13-atom simulated annealing run was performed on an SGI Altix supercomputer, a large shared memory machine with 56 x 1.6 GHz Intel Itanium2 processors and 112 GB of RAM. The computing facilities were provided by the Centre for Scientific Computing of the University of  with support from Science Research Investment Fund grant (grant code TBA). <heading>Assignment 3</heading>The program was adapted to use MPI libraries instead of the OpenMP compiler directives. All the OpenMP lines were stripped out. The seed value for the random number generator was changed to be chosen dependent on processor rank, so each process has a different stream of pseudorandom numbers. The loop iterating the temperature down (simulated annealing) was removed; instead each process was given a different temperature based on its rank. Changes were made so that only the master process writes to the output file. Every 10 (or whatever the exchange_interval variable is set to in the program) moves, neighbouring processes attempt to swap atomic configurations depending on energy considerations of the two systems. Counters take note of successful swaps. This is called parallel tempering. There are two types of process - even ranked and odd ranked. The even ranked processes are the ones that make the decisions about swapping and send their decision to the correct odd ranked process (either above or below). If swapping is decided upon then the entire atomic configuration is passed between processes using the MPI_Send and MPI_Recv function calls. After checking the 13-atom test gave the right energy, in my case -3.396695 per atom, I increased the number of atoms to 38 and the moves to 5 million. This program was compiled and run on Starling giving the average energy per atom to be -4.563743 for temperature 0.01. (Starling consists of 16 x 2.6GHz Opteron nodes each with 8 GB of memory and interconnected by Myrinet 2000 revision "F", my MPI program ran on 8 of these nodes.) <figure/>For a 38 atom Lennard-Jones cluster the global minimum energy configuration is that of a truncated octahedron, having a simulated energy of -173.928427 in total, compared to my slightly higher -173.422234 total energy. My 38 atom cluster has the octahedral symmetry of this global minimum. <picture/>There exists, however, another minimum nearby based on icosahedral symmetry with a total energy of -173.252378, which is higher than the energy of my cluster. <picture/><heading>Assignment 4</heading>This assignment was mainly written in Python, using Tkinter to create a Graphical User Interface (GUI). Although completed in several stages, the text below records just the final outcome for clarity. <picture/>All the MPI calls were removed from the program, so the Monte Carlo routine would run at just one temperature, determined by the user and set by the GUI. The number of moves was reduced to 5000 to speed up the computation. The number of atoms was fixed at 13 in both the Fortran and Python code. The lines that created a random configuration and outputted to a file were removed in the Fortran code, it was now entirely dependent on the Python interface for Input-Output. The Fortran program was changed to a subroutine that takes in a 13 by 3 array containing the xyz atomic position for each atom, and the temperature of the system. The subroutine returns the processed 13 by 3 array back to the Python interface. In order to get the Fortran program to interface with Python a program to wrap the subroutine, called F2PY, was used. This allowed Python to 'import' the Fortran code as if it was a regular module. The Python code imports several modules including Numeric and Scientific, which provide visualisation of the atomic cluster using a VRML2 viewer. My interface allows the user to view the contents of a '.xyz' file or view the cluster directly from the buffer which doesn't require writing to disk. Also, the user can view the contents of a file as ASCII or see the array in the buffer likewise. An important function of the interface is the ability to create random positions of atoms, since this functionality was now stripped from the Fortran code. <picture/>The temperature is also controlled through the interface, so the user can view the configuration, change the temperature, run the Monte Carlo procedure, and view again. Once the user is satisfied they can choose to write to disk, as all the viewing and resubmitting arrays is done in memory. The user can manually anneal a random cluster by reducing the temperature between each run using the slider on the interface. Alternatively, an 'Anneal' button has been provided that linearly reduces the temperature from 0.5 to 0.01 over 50 iterations. This robustly takes a random configuration to the icosahedral symmetry global energy minimum. Although not necessary, to aid visualisation, the Python code calculates and draws in the bonds between the atoms with colour denoting length of bond. Although the program can only internally handle 13 atom clusters, the 'display file' routine is capable of displaying any number of atoms in a file of xyz format. Thus for clusters containing more than 13 atoms, bond lengths over 2 (corresponding to  FORMULA ) are not drawn. 