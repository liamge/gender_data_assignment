<heading>Project Specification</heading><heading>Project Title</heading>The title of the project is "Comparison of Block and Stream Ciphers". <heading>Problem</heading>Due to the technological developments in telecommunications in recent years, the need for new methods of maintaining security and privacy over insecure communication media has emerged. This is usually achieved through using some form of data encryption. Data encryption involves taking some type of data (in computer communications, generally in binary form) and in some way altering it so that only the intended recipient - and possibly also the sender - can work out what the original data was. The alteration generally involves either rearranging the characters in the data, or replacing certain characters with other characters, or may involve a combination of both of these. Encryption algorithms can be split into two general categories: block ciphers (which encrypt multiple characters at a time) and steam ciphers (which encrypt data character by character). There are many different algorithms within these categories, and often even different ways of implementing the basic algorithms, which leads to a huge array of choices for any given application. <heading>Objectives</heading><list>To gain a good understanding of the theory behind block ciphers.To gain a good understanding of the theory behind stream ciphers.To select two algorithms from each category and examine them in detail.To implement versions of these algorithms in software.To compare the implementations in terms of speed of use.To compare the chosen algorithms in terms of speed of use and resistance to attack.</list><heading>Achieving Objectives</heading>Refer to resources listed below to gain a thorough understanding of the principles behind block ciphers. Refer to resources listed below to gain a thorough understanding of the principles behind stream ciphers. Refer to resources listed below to find examples of algorithms in each category. From research, select two algorithms from each category which are worthy of further investigation. Refer to resources listed below to gain a thorough understanding of the principles behind each specific algorithm. Using a suitable programming language (most likely C++) produce an implementation of each selected algorithm. Using a selection of example data, test the implementations of the algorithms to establish their relative speeds of encryption. Refer to resources listed below to gain a thorough understanding of the mathematical principles behind proving theoretical speed of encryption. Refer to resources listed below to gain a thorough understanding of different types of cryptographic attack and mathematical ways of examining algorithms' resistance to such attacks. Use knowledge gained from this research to examine the theoretical speed of encryption and resistance to attack of each of the chosen algorithms. Produce a comparison of the algorithms in terms of these properties. <heading>Resources</heading>It is likely that the algorithm implementation will be done in C++, therefore access to a computer with a C++ compiler and a suitable text editor will be required. If appropriate, access to compiler documentation will be required. As a large part of this project involves research, most of the resources required are books, websites or similar reference sources. Sources which are likely to be useful are listed below. This list may be expanded later. <list>Stinson, Douglas R. (2002). Cryptography: Theory and Practice (second edition). CRC Press.Welsh, D. J. A (1988). Codes and Cryptography (first edition). Clarendon Press.Damg√•rd, Ivan (1999). Lectures on Data Secutiry: Modern Cryptology in Theory and Practice (first edition). Heidelbery GmbH & Co.Koblitz, Neal (1987). A Course in Number Theory and Cryptography (first edition). Spinger.Welschenback, Michael (2001). Cryptography in C and C++ (first edition). Apress.Buchmann, Johannes (2004). Introduction to Cryptography (first edition). Springer-Verlag New York Inc.Schneier, Bruce (1995). Applied Cryptography: Protocols, Algorithms and Source Code in C (first edition). John Wiley & Sons Inc.Wikipedia.  URL RSA Security; Crypto FAQ.  URL Bruce Schneier's Publications;  URL </list><heading>Risk Assessment</heading>Hazard Working at a computer Risk Eye strain Minimise By Take regular breaks Risk RSI (Repetitive Strain Injury) Minimise By Use a variety of input peripherals (mouse, keyboard, etc.) Risk Pain due to poor posture Minimise By Ensure posture is good while working Hazard Storing files on computer media Risk Files become corrupted/lost Minimise By Take regular back-ups of work and store on separate media (e.g. CD) Hazard Copyright held on proprietary algorithms Risk Infringing copyright Minimise By Ensure all selected algorithms do not have copyright preventing them from being implemented in an academic context Hazard Illness/injury/other unforeseen circumstances Risk Project is delayed Minimise By Allowing plenty of time for each activity in the schedule; allowing time towards the end of the schedule for completion of any outstanding tasks <heading>Timetable</heading><heading>Term 1</heading>Date Task(s) To Be Completed 07/10/05 Begin to draft specification; find appropriate resources; research mathematics and basics of cryptography 14/10/05 Complete project specification; research block ciphers 21/10/05 Research block ciphers; research specific block cipher algorithms 28/10/05 Research stream ciphers 04/11/05 Research specific stream cipher algorithms 11/11/05 Research cryptographic attacks 18/11/05 Research any remaining areas which are unclear 25/11/05 Begin to draft progress report; complete any remaining research 02/12/05 Complete progress report; investigate C++ development environments and compilers <heading>Term 2</heading>Date Task(s) To Be Completed 06/01/06 Complete familiarisation with C++ development environment 13/01/06 Begin implementation of algorithms in C++ 20/01/06 Complete implementation of algorithms in C++ 27/01/06 Test implementations for speed of use 03/02/06 Begin speed of use & ease of attack analysis 10/02/06 Complete speed of use & ease of attack analysis 17/02/06 Begin producing presentation; bring research together and begin to draft report 24/02/06 Finish producing presentation; continue drafting report 03/03/06 Give presentation (if appropriate); complete draft report and discuss with supervisor 10/03/06 Give presentation (if appropriate); make alterations to report <heading>Holiday Periods</heading>Over the Christmas vacation, some refamiliarisation with the C++ programming language should be done, as well as selection of an appropriate development environment and compiler. By week 1 of term 3, final report must be completed therefore any final alterations to the drafted report should be made over the Easter break. 