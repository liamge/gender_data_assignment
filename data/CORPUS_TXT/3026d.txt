<heading>Defining the problem</heading>The program created should help a company to keep track of their computer equipment. The company wants to tract the following information about each item: <list>Item nameItem ID (in the range 1000 - 9999) Item ownerItem Room (a number in the range 100 - 399)Item value in pounds and pence which cannot be negative</list><heading>Start the program and show the menu</heading>When the program starts, the first thing that will happen is displaying the menu. In the case of this program, the menu has eight different options. These are: <list>Add an item to the database.Remove an item from the database.Find an item from its product number and displaying all information for that itemDepreciate the value of all the products. (The company estimates that the value of each item goes down each year to 70% of its previous value, this facility calculates the new values when activated).Display all the items in order of increasing product ID.Display all the items in order of increasing room number.Show the number and name for each item that needs replacing (the company replaces items when their value is below Â£40).Quit the program.</list>Each option should be activated when the user input an entry in the menu. Also, if the user enters an invalid entry, the menu should loop and offer the user the opportunity to re-enter a value. <heading>Add an item to the database</heading>The database should have a capacity of up to 15 products and the program should not let the user enter a 16 th product. If he tries to do so, an error message should tell the user that the limit was reached. Also, when adding an item, some checking of the information entered will need to take place. First, the program has to check that the ID entered is in the range 1000-9999. Secondly, it also needs to check that the product room entered is in the range 100-399. Finally, when entering a value for an item, the program should check that the value is higher than 0. <heading>Remove an item from the database</heading>When this option is chosen, the program should ask the user to enter the ID of the item to remove. The program will then search the records to find and remove the appropriate item. If the program cannot find it or the database does not contain any items, the program should tell the user that the item doesn't exist or that there are no items to remove. <heading>Find an item and display its information</heading>Again, when this option is selected, the program will first ask for the ID of the item to find. Once the use inputted it, the program will search the item in the records and display its information on the screen. Although, if it cannot be found or if the database does not contain any items, an error message should appear. <heading>Depreciate all the values</heading>The program should simply depreciate all the values of items stored in the database to 70% of what they were before. <heading>Display all the items in order of increasing ID number</heading>For this option, the program should first sort all the items with their ID numbers then display them on the screen. If there are no items to sort, the program should just display an error message and go back to the menu. <heading>Display all the items in order of increasing Room number</heading>For this option, the program should first sort all the items with their Room numbers then display them on the screen. If there are no items to sort, the program should just display an error message and go back to the menu. <heading>Show items that need replacing</heading>If this option was chosen, the program should display on the screen all the items that have a value that is smaller than 40 pounds. If there are no items in the database, the program should just tell the user that there are no items available. <heading>Quit the program</heading>Finally, when the user decides to quit the program, the program should simply end. <heading>Understanding the problem</heading><heading>Store up to 15 products</heading>First of all, in order to store the records and meet the assignment specification, a record type and an array type will need to be created. The record type will be used to store the different information about each product. The array type will be used to be able to store up to 15 different products. One record should be enough as they all contain the same type of information: <list>Name, Owner : String (because the value will contain letters)ID, Room : Integer (because the value will only contain whole numbers)Value : Real (because the value has to show the pounds and pennies)</list>In order to differentiate the three products, I will use an array type that will allow me to avoid using a global array variable, which is not allowed for this assignment. <heading>Reading Choice from the menu</heading>First of all, as the menu will need to loop until the user decides to quit the program, a function for this could be created to avoid entering the same code many times. The function would then simply return the value of the choice entered and the main part of the program would check what the user's choice is. In order to store the value, a char variable should be used because it can only hold 1 character, which is what we have to try to do in this assignment. According to the value entered, a procedure or function for each option could be called. Underneath is an example on how the value could be checked (assuming that the variable name is Choice):  FORMULA  As you can see, this will deal with the lower case and upper case entries. Also, if the value does not match any of the options, it will ask the user to re-enter an option. <heading>Procedure Add an Item</heading>First of all, in order to keep track of the number of products in the database, a counter will need to be used. So, when an item is added to the database, the counter increases of 1. This will allow the program to know if there are already items stored in the application or if the maximum amount of items is stored. First, the program has to check that the counter is not greater than 15 (limit of items). If it is, the program should tell the user and then go back to the menu. If it's not above the limit, then the program should start the sequences to add an item. First, the program will ask for the ID of the new item. Once entered, the program has to check that the ID is in the correct range and that it hasn't already been used by another product. In order to do this, the application has to compare each ID with the value entered. A for loop, while loop and a counter should be used to check the validity of the ID. Also, the program will need to "doublecheck" the ID from the 1 st position to the array until the last and then from the last until the 1 st position in order to make sure that the ID is only accepted when a unique value has been entered. After the ID, the program will ask for the user to enter the name and the owner of the item. The program should simply use a string that would store both of this information. Next is the Room Number, which needs to be checked to make sure that it is in the range 100 to 399. This can be done just like the ID using a while loop. This will be stored in an integer variable. Finally, the Value also has to be checked. It needs to be higher or equal to zero. Again, a while loop can be used to check the input but the value will need to be stored in a real variable as it needs to include the pounds and pennies. <heading>Procedure Remove an Item</heading>To remove an item, the 1 st thing that the program does is to check that the counter is greater than 1 to make sure that the database contains at least 1 item (to remove). If not, an error message will appear and the user should have the opportunity to re-enter (while loop to do this). If it is, then it will ask the user to enter an ID, which will need to be compared with all the items ID to find the right item to remove. To delete the item, the program will simply copy all the items that are after the one that was found and past it over it. For example: If we needed to remove 1001 from the items stored below:  FORMULA  FORMULA  FORMULA  <heading>Procedure Find an Item</heading>To find an item, the program will first need to ask the user to enter the ID of the product. Then the program should use a sentinel search, which works like this:  FORMULA  The code above, compares the ID entered with the Record ID at position "pos". While it doesn't match it, the program increments the value of pos and re-compare it until the value of pos is the same as the counter (number of products in database). Once it finds a match, the program will then have to show all the items. Note: If there are no items in the data when calling the procedure to find an item, an error message should appear on the screen. Also, if the ID does not match any of the records, another message should appear on the screen. <heading>Procedure Depreciate the value of all items</heading>To depreciate all the value from the records, the program should simply use a "for loop" that does the following to change the value to 70% of its current value:  FORMULA  Example:  FORMULA  Note: If there are no items in the database when calling the procedure to find an item, an error message will appear on the screen. <heading>Procedure Sort the Items with ID's or with Room No (increasing order)</heading>In order to sort the Items with the ID's or with the Room No, a bubble sort should be used. It can be used those two options because it needs to do exactly the same thing except that the values that need to be sorted are different. This means that one procedure should be created for each option. Underneath is an explanation on how the bubble sort system works:  FORMULA  This code will in fact compare the 1 st value concerned with the 2 nd value. If the second is smaller, it will call the swap procedure (see Procedure Swap for a description) to swap the values. Then, the 'for loop' will continue by comparing the 2 nd value with the 3 rd one and will do the same until the for loop ends. This needs to be within another 'for loop' as the program needs to do it 14 times (for this work as there are 15 products max) in order to sort all the values in increasing order. Note: In order to swap the records, the whole array should be swapped so all the information is changed at once. <heading>Procedure Swap</heading>Once the values have been passed by passing parameters in the sorting procedures, the swap function will use a temp (temporary) variable. The way it works is simple. The value of the temporary variable is first assigned the value of 1 st value. Then, value 1 is assigned the 2 nd value. Finally, value 2 is assigned the value of the temporary variable. This way, all the values have been swapped. See underneath for an example of code to use in the Delphi program:  FORMULA  <heading>Procedure Show Items that need to be replaced</heading>In order to display all the items, the program will need to check all the value of the items and display the ones that have a value under Â£40. The most efficient way to do so, would be to use a 'for loop' with an 'if statement' within it. Example:  FORMULA  <heading>Quit the program</heading>Quitting the program doesn't need a procedure. In the main program part, a check if the user enters q or Q should be made to quit the program. This means that in order to quit the program, the user should simply enter q or Q in the menu. <heading>Consideration of the User Interface</heading>e.g. 1  FORMULA  e.g. 2  FORMULA  <heading>Outline a basic solution algorithm</heading><table/><heading>Refining the algorithm & pseudocode</heading>To describe a program, as its name indicates it, a basic algorithm is a sort of very simplified version of the complete program. Each step of the algorithm may also contain some "sub-steps" or sub-sub-sub steps that need to be explained and refined. For this program, these are the steps that needed to be "refined": Adding an item: in order to add an item in the database, the program will need to carry out some information checking. These are: ID must not be different from all the other current ID's and it must be in range 1000 to 1999 to be accepted. If not, error message should appear and allow user to re-enter. Room No has to be in range 100-399. Value of item has to be higher or equal to 0. Removing & Finding an item: Again, when entering the ID to remove an item, the program has to check that information entered is valid. The program has to loop until the ID entered by the user matches one of the record. Once the ID is accepted, it will delete the record that has the same ID. Finding an item works exactly the same way, except that it doesn't need to loop. If the ID does not match a record, the program should go back to the menu. Finally, for those two options, the program should use a 'sentinel search'. Depreciate all the items value: using a for loop, the program should use the following formula to depreciate the value of each item: Value := (Value*10)/70 <table/><heading>Refine and develop the algorithm & pseudocode to deal with all conditions</heading><heading>Part 1 - Record Type and Array Type</heading>As required by the specification, I have to use all the facilities that we've learnt for this work. The easiest and most effective way for me is to use one record type (which can be done in this case all the items records will have exactly the same fields) which I would relate with an array type [1.. 16]. The big advantage of doing this is that I will allow me to store many different records and avoid repeating the same code many times. <table/><heading>Part 2 - Dividing the implementation of the code into procedures</heading>In order to find what should be part of a procedure in the program, the best thing to do is to try to identify the different tasks that it needs to carry out. These are: <list>Introduce programOutput Menu & read choiceAdd an item to the databaseRemove an item from the databaseFind an item in the databaseDepreciate all the items valueSort the items with increasing ID numberSort the items with increasing Room numberShow the items that need to be replaced</list>As you can see above, the program can easily be spread into 9 tasks. We could use this as an example to spread the work in procedures or functions. First of all, the 1 st task do not really need a procedure as it should be included in the "main body" of the program (begin end.). Secondly, menu could use a function as it needs to return 1 value, which is the choice entered by the user. Once the value is returned to the main program, a selection statement should check what has been entered in the menu. For each choice, the program should call a procedure that would return the value when necessary (using parameters passing). The other procedures are as shown underneath. There will be one to: <list>Add an item to the databaseRemove an item from the databaseFind an item in the databaseDepreciate all the items valueSwap items procedureSort the items with increasing ID numberSort the items with increasing Room numberShow the items that need to be replaced</list><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><heading>Data Dictionary</heading><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><table/><heading>Notes on Source Code</heading>You will notice that the order of the records, functions, procedures and main body of the program has changed a little bit. This is simply because in order (for the program) to be able to recognize all the names, procedures, etc... it needs to be written in a specific order. In fact, it simply has to be declared before using it. Although, the program also needs to show the different steps of each options in the right order. This can simply be done by calling the appropriate procedure or function at the appropriate time. So in the program, I had to first declare the record type and array type. Then, it uses it with the array type declared and with the local variable based on the array type. <heading>Testing Documentation</heading><heading>List of Test Cases & Test Plans</heading><list><heading>Menu (main program testing):</heading>Enter a wrong menu choice.Enter q or Q.Enter a or A when less than 15 products are stored.Enter a or A when 15 products are already stored.Enter r or R when at least 1 product is already stored.Enter r or R when no products are stored yet.Enter f or F when at least 1 product is already stored.Enter f or F when no products are stored yet.Enter d or D when at least 1 product is already stored.Enter d or D when no products are stored yet.Enter n or N when at least 1 product is already stored.Enter n or N when no products are stored yet.Enter l or L when at least 1 product is already stored.Enter l or L when no products are stored yet.Enter s or S when at least 1 product is already stored.Enter s or S when no products are stored yet.</list><table/><list><heading>Adding Items procedure:</heading>Enter an ID in the range 1000-9999.Enter the ID (9999) on the upper boundary of the range 1000-1999. Enter the ID (1000) on the lower boundary of the range 1000-1999.Enter 10000 to see if ID range works as it should.Enter 999 to see if ID range works as it should.Enter an ID that is already used by an item.Enter a name of itemEnter an owner of itemEnter the Room Number (399) on the upper boundary of the range 100-399. Enter the Room Number (100) on the lower boundary of the range 100-399.Enter 400 to see if room number range works as it should.Enter 99 to see if room number range works as it should.Enter a value higher than 0.Enter a value of 0 (to test lower boundary limit).Enter a value of -1 to make sure the range works as it should.</list><table/><list><heading>Removing Items procedure:</heading>Enter an ID in the range 1000-9999 (assuming it matches 1 record).Enter the ID (9999) on the upper boundary of the range 1000-1999 (assuming it matches 1 record). Enter the ID (1000) on the lower boundary of the range 1000-1999 (assuming it matches 1 record).Enter 10000 to see if ID range works as it should.Enter 999 to see if ID range works as it should.Enter an ID in the correct range but that doesn't match any of the records.</list><table/><list><heading>Finding Items procedure:</heading>Enter an ID in the range 1000-9999 (assuming it matches 1 record).Enter the ID (9999) on the upper boundary of the range 1000-1999 (assuming it matches 1 record). Enter the ID (1000) on the lower boundary of the range 1000-1999 (assuming it matches 1 record).Enter 10000 to see if ID range works as it should.Enter 999 to see if ID range works as it should.Enter an ID in the correct range but that doesn't match any of the records.</list><table/><list><heading>Depreciate Items procedure:</heading>Depreciate the value of all the items in the database.</list><table/><list><heading>Sorting Items with ID procedure:</heading>Add items in an "unsorted" order to the database and sort them with their ID.Add items in a decreasing ID number and sort them with their ID in increasing order.Add items in an increasing ID number order and sort them with their ID number in increasing order.</list><table/><list><heading>Sorting Items with Room no. procedure:</heading>Add items in an "unsorted" order to the database and sort them with their Room no.Add items in a decreasing Room number and sort them with their Room no in increasing order.Add items in an increasing Room number order and sort them with their Room number in increasing order.</list><table/><list><heading>Show items that need to be replaced procedure:</heading>Add an item with a value of 40 in the database and show the items that need to be replaced.Add an item with a value of 39.99 in the database and show the items that need to be replaced.Add many items with a value of 40 in the database and show the items that need to be replaced.Add many items with a value of 39.99 in the database and show the items that need to be replaced.Add many items with a value above and below 40 and show the items that need to be replaced.</list><table/><heading>Solutions to problem(s)</heading>As indicated in the Test Plan, one problem appeared when implementing and running the program. The problem was that the program would accept 10000 as an ID when adding an item to the database. This was quite important as it did not match the specification requirement. In order to solve this problem, here are the steps that I followed: <list>Check the pseudocode to make sure that what was written is correctCompare with other marks procedure and see if there are any abnormal differences.If everything is normal, check the Delphi source code and make sure that it matches the final refined pseudocode.Apply the required changes to make the program work properly.</list>In this case, the source code that I wrote in Delphi did not match the pseudocode. It says in the pseudocode that while the ID entered is greater than 9999 or smaller than 999 then, it is incorrect. When I checked my Delphi code, it is this statement that was wrong in the "add_item" procedure:  FORMULA  If you compare to the pseudocode version of this piece of code, you will easily understand where the mistake is:  FORMULA  The wrong version, does accepts 10000 as an ID. On the other hand, the one from the pseudocode does not accept it. <heading>Solving the problem & Final Result Evaluation</heading>To solve the problem once and for all, all I had to do is to modify the wrong piece of information from the Delphi source code. I could then compile the program and run it again to check that it was working as expected. Finally, you will also notice that the program matches perfectly the program specification and design that was planned. 