<heading>Introduction</heading>As part of the module CY3A2 System Identification we are required to create an ARX (AutoRegressive eXogenous) based recursive least squares program (using a template which has already been provided) to identify and work on a model. The General definition of a dynamical system is accepted as the following:  FORMULA  with input signal {u(t)} , output signal as {y(t)} and where v(t) is some disturbance . (q -1) is the backward shift operator , In other words (q -1) y(t) = y (t-1) .  FORMULA  Equation (1) can be expressed as a linear regression  FORMULA  where ,  FORMULA  Hence the simplest ARX model can be written as  FORMULA  Without going into too much detail the formulae involved here in order to make the Recursive Least Square algorithm work can be summarized in four equations below where our objective is to get the estimated value of θ(from now on referred to as θhat) . <fnote>θhat(n) = (1/n ) Σ y(t) </fnote> FORMULA  The RLS algorithm can be modified for tracking time varying parameters . One approach is the RLS algorithm with a forgetting factor . In this a term λ called forgetting factor is introduced to (9) . λ<1 and is usually 0.99 or near that value . This means that as n increases , the measurements obtained previously are discounted . Older data has less effect on the coefficient estimation and hence forgotten. Hence (9) is modified so that  FORMULA  <heading>Task A - Create a test system & Identify using recursive least squares (ARX)</heading>In our given case we have to modify crib.m in such as way that it works as a recursive least square program . As required by our Assignment instructions we have to choose a stable second order system as our model. In other words <fnote>Most of the working of the file is mentioned in the Appendix section. NB: I have not employed the use of either loadass.m or dord.m as my crib.m does everything that is required. </fnote> FORMULA  Here  FORMULA  A suitable stable second order model utilized for this purpose is  FORMULA  <heading>step input</heading> FORMULA  What we have noticed in this case is that the recursive least squares program is predicting nearly the correct coefficients , the final value of the estimate it gets in the allowed 50 iterations is :  FORMULA  This usually starts to converge close to the true value around after 24 iterations. But after further experimentation at 2000 iterations  FORMULA  and doesn't change after that . <figure/>Fig a1. shows a step input <figure/>fig a.2 shows y and yhat . <heading>sampled sin wave as input</heading> FORMULA  <figure/>As we can observe from fig 3 that this iterates more than 300 times and roughly begins to settle (i.e. coefficients) after 75 cycles . But after more than 350 iterations a 1 = -1.5350 a 2=0.8598 b 1 = 0.418 b 2=0.0394 , Although much better than the previous input is still not exactly equal to  . <figure/><figure/><heading>Random input</heading> FORMULA  <figure/>Observations after 200 iterations are taken and a 1 = -1.5342 a 2=0.8587 b 1 = 0.416 b 2=0.0396 . Which are not poor estimates of the system . In addition to that these are the best estimates of b 1 & b 2 so far. <figure/><figure/><heading>Step Input with Gaussian noise added to output</heading> FORMULA  as we see in this case that the solution never converges to any solution and gives erratic answers . value of  varies greatly and the last observation made is  FORMULA . which is totally inconsistent to any readings previously made . <figure/><figure/><figure/><heading>Sin wave as input with Gaussian noise added to output</heading> FORMULA  Again this gives highly inaccurate results, which do not even come close to the true values of the coefficients. The last recorded observation is  FORMULA  <figure/><figure/><figure/><heading>Random input with Gaussian noise added to output</heading> FORMULA  last observation made  FORMULA  <figure/><figure/><figure/><heading>Step input with forgetting factor</heading>Including a forgetting factor and observing its effect. When comparing this to step input without forgetting factor there are hardly any changes as lambda is too close to being 1 and hence doesn't produce really different plots . <figure/><figure/><figure/>had λ been not as close to 1 then the responses would have been starkly different . so far all models we have done have only n a=n b=2 . <heading>Task B- Identification of the system parameters for the master of a head controlled telerobot</heading>This part relates to a hear operated master/slave telerobot . We are provided with two sets of data each with step responses (from a 60mm step input) with different conditions of K p and K d in the PID controller . The input in the following cases will be u=60*ones(size(y)) . There are two sets of data sets we have been provided on which we have to do four tests each and comment on the results . In addition to plotting the coefficients and y and yhat , we are also required to plot a z transform and find the location of the a coefficients on a unit circle . If they ('a' coefficients ) all lie in the circle the given model is stable . There are a total of eight experiments in this part four each for the two different sets of data . They specify dimensions of θ with three figures the first plotting the coefficients , the second showing both y and yhat and the third showing a z-transform and finding locations of the final poles of 'a' coefficients . <fnote>These diagrams may show that y and yhat are exactly the same due to restrictions in the printing process but rest assured that these are different if viewed in matlab when zoomed or when viewing corresponding elements of the vector . </fnote><heading>Working with xp30d07.dat </heading>Experimental run on the x axis where the proportional gain was set to 30 and derivative gain was set to 7  FORMULA  In this case n a = n b = 2 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = 3 & n b = 2 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = n b = 3 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = 4 n b = 3 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/>It is concluded that All models are stable , some more than the other (although commenting on their degrees of stability is beyond the scope of this report). ii) The best model to predict this particular mechanical system is the one having least deviation between the measured and the predicted value of the output . In other words y - yhat should be minimum . Which in this experiment is the model θ = [a 1 a 2 a 3 b 1 b 2 b 3] .This is done by subtracting both vectors and finding an average for all values . <heading>Working with xp40d03.dat </heading>Experimental run on the x axis where the proportional gain was set to 40 and derivative gain was set to 3  FORMULA  In this case n a = n b = 2 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = 3 & n b = 2 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = n b = 3 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/> FORMULA  In this case n a = 4 n b = 3 and the last observed value of θ we get is  FORMULA  <figure/><figure/><figure/>It is concluded that i)All models are stable , some more than the other (although commenting on their degrees of stability is beyond the scope of this report). ii) The best model to predict this particular mechanical system is the one having least deviation between the measured and the predicted value of the output . In other words y - yhat should be minimum . Which in this experiment is the model θ = [a 1 a 2 a 3 a 4 b 1 b 2 b 3] .This is done by subtracting both vectors and finding an average for all values . Although θ = [a 1 a 2 a 3 b 1 b 2 b 3] is quiet close to the best model in this case . <heading>Task C - ARMAX</heading>Upgrade the basic RLS algorithm to either include instrument variable or a moving average noise model based on Pseudo Linear Regression , or both . Illustrate these by comparing results with those obtained in B. From equation (4)  FORMULA  In other words if the disturbance is described as a moving average of a white noise sequence e(t) .  FORMULA  Then the resultant model is  FORMULA  also known as ARMAX model (AutoRegressive Moving Average and eXogenous variable) <fnote>Please note that all equations discussed in chapter 1 change with a C quantity added to them.Hence  FORMULA  </fnote>The model which I am going to demonstrate here (for the sake of simplicity and to keep in check the length of this report) is the one where n a=n b=3 & n c=1 . Reasons for this being that these give the best way to compare the two different approaches we have covered .Hence our model can be summarized as  FORMULA   FORMULA  The last observed value of θ we get is [-1.3286 0.0802 0.2631 0.0000 0.0034 0.0111 -0.4698] which is very interesting as the values of 'b's quite closely matches to xp30d07 with θ = [a 1 a 2 a 3 b 1 b 2 b 3 ] but not the values of 'a's . Hence the only value of c we get here is -0.4698 . Not only does ARMAX add an moving average error term it also further reduced the difference between y and yhat (from the corresponding ARX based model)in this case and is therefore a better model for prediction . This is also stable as all the values of a lie in the unit circle . <figure/><figure/><figure/> FORMULA  The last observed value of θ we get is [-1.2965 -0.1792 0.4905 0.0001 0.0056 0.0090 -0.2233] which is very interesting as the values of 'b's quite closely matches to xp40d03 with θ = [a 1 a 2 a 3 b 1 b 2 b 3 ] but not the values of 'a's . Hence the only value of c we get here is -0.2233 . Not only does ARMAX add an moving average error term it also further reduced the difference between y and yhat (from the corresponding ARX based model)in this case and is therefore a better model for prediction . This is also stable as all the values of a lie in the unit circle . <figure/><figure/><figure/>