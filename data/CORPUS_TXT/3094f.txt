<heading>1. The OPUS approach to excellence</heading>OPUS Ltd. is a well established software development company with extensive industry experience. OPUS has an excellent track record for delivering excellent quality products on time and within reasonable price. The secret is the blend of high calibre technical staff, application of well known software development techniques and management principles and experienced management and solid financial backing from investors. OPUS's commitment to quality of of the outmost importance. Out quality is of the highest standard the client's can get. Developing software to well established standards such as PRINCE2, ISO 9000 and SEI standards are all too familiar to us. Our highest quality and affordable products are due to the right balance of standards, procedures and flexibility within the establishment. Our technical creativity and efficiency are not hindered by organisational bueurocracey and too much paperwork. Yet we can guarantee the QA in all our products by following our unique QC and QA procedures. We believe in the application of right procedures and techniques at the right time and place in the development life cycle will enable our clients to benefit, which no doubt we have proven over and over again. At each stage of production, quality is built into our products though our quality control processes and guaranteed by quality assurance procedures before moving over to the next stage. This varies from informal technical reviews and walkthroughs to extensive system testing to confirmation to the right budget and time. We have fulltime QC teams that are dedicated to make sure that our products confirm to our standards. We continuously involve our clients during each stage of production make sure that our standards meet their requirements and expectations. All our suppliers and contractors are hand picked to make sure they confirm to the sufficient quality standards. Our most valuable resource are our technical teams who makeup most of the OPUS. Our highly skilled and qualified tech staff come from well reputed universities such as Oxford Brookes. Managed by our highly specialised and experienced management teams. We have sophisticated automated software tools (custom built and brought) that enables our tech teams to efficiently develop and test products. This is the OPUS culture and our trade secret and this is why we can produce high quality products that meets client expectation, deliver the products on time AND at reasonable prices. This competitive advantage enables us to compete with very large software houses and has always been the envy of the industry. <heading>2. Quality control tasks for this project</heading>Depending on the stage and activity of the development cycle the QC/QA techniques varies. However all the following techniques are used in the SQA process. <list>Technical peer reviewWalkthrough meetingsCustomer reviews and acceptanceQA auditManaging requirement traceability processesMaintenance of QA reports of reviews and auditsManagement notification of non compliance with standards, procedures or notable problems and issuesProvide training in QA requirements if necessary</list><table/><heading>4. Strategies for reducing time scales</heading><heading>Segmenting into Releases</heading>It maybe possible that although the client's date is absolute, the entire project does not need to be finished at the same time e.g. Client management may not exactly need to use the Produce patients system letters until the next financial quarter. Risks: Need to be careful in approaching the client. If it appears that OPUS are proposing to enter production with an incomplete system, they will simply reject OPUS. Nobody wants to risk business on something that is not finished. Risk mitigation: Client can be educated about release development, a process in which a system is developed and implemented in self-contained chunks e.g. Produce patients records is not unfinished; it is a complete release of a system to which subsequent releases will add further functionality. Concept of release development to align the schedule by defining releases to include whatever is required by the absolute date. Anything the client agrees can be deferred goes into release 2 (or release 3). If you can complete release 1 by the required date, OPUS has successfully aligned the project to your client's requirements (and contract). <heading>Reduce Functionality</heading>If the date is absolute and cannot be segmented the system into releases, it may be possible to compress the schedule by reducing functionality. This is another type of release development in which release 1 contains all the components of the complete system scaled down to a lower level of functionality. Subsequent releases will enhance the system to the full functional levels that were originally planned. To reduce functionality, step through all the deliverables with the client and identify sections or pieces that are not absolutely necessary. It is vital that you enroll the client in this process. First, the client must understand why the system is being cut back. Second, only the client can identify functionality that can be deferred. Risks: Same as segmenting into Releases. Risk mitigation: Same as segmenting into Releases. <heading>Additional Staff to the team</heading>Another approach to aligning the schedule is to assign additional staff either internal or external. E.g. Adding two more systems analyst and two programmer to the project team to speed up the activities. Risks: Depends upon the availability of other staff or potential employees, as and the extent to which the activities are independent of one another. May take time to hire a new person and the person will take time to adopt to the OPUS culture and project activities. Risk mitigation: Plan early. Adding people is more realistic if planned to have done at the beginning than if the requirement appears after the project has started <heading>Subcontracting</heading>One way to spread the work over more people is to subcontract (our source) part of the project to another company that specializes in systems development. "The productivity of focused companies can be as much as 100 percent greater than that of their larger, more structured counterparts". In a tight project, they can sometimes provide the boost that the project needs. This approach maybe more be expensive, but meeting the schedule may be worth it especially when considering follow-up business with NHS. Risks: May not deliver on time or up to the required quality. Risk mitigation: Carefully evaluate the subcontractors and plan early. <heading>Encourage, motivate, reward and provide flexibility to the team</heading>Another approach is to get company's permission to ignore office standards, conventions, bureaucratic paperwork (maybe even time consuming QA paper work but subjected to careful review), or any other corporate demands in a focused attempt to get the job done correctly. If, for example, bringing the team physically together would help but the company policy is for individuals to work at their assigned desks, request space dedicated to the project and bring the team together. e.g. if the hot shot programmers are more productive working from 6pm-5a.m wearing jeans and a T-shirts with explicit text, give them the opportunity and block any attempt by the company's HR to intervene. If team members wasting time on company's meeting, employee evaluations and even disciplinary action ask that they be excused for the duration (for the sake of the project). Risks: If full team commitment cannot be gain it is of no use and may escalate to internal battles which may hinder the project e.g. continuous harassment and annoyance that will shift the team's concentration away from the project. HR department may not cooperate. Risk mitigation: Apply HR techniques such as above to get the maximum output from the team. "But these organizations miss the fact that Microsoft and other successful commitment-oriented companies don't require overtime. They hire people who love to create software. They team these people with other people who love to create software just as much as they do. They provide lavish organizational support and rewards for creating software. And then they turn them loose. The natural outcome is that software developers and managers choose to work long hours voluntarily. Imposter organizations confuse the effect (long hours) with the cause (high motivation)" <heading>Use/Buy CASE tools</heading>Use of CASE tools can significantly improve the efficiency and productivity of the project e.g. usage of automated testing software for stress testing will cut down lot of time and effort in developing in-house stress testing programs. The packages maybe expensive especially specialised ones, however it's well worth while if it cuts down effort and time significantly. Risks: Off the shelf packages may not meet the exact requirements and actually take more time in customising or worse provide false data. Risk mitigation: Carefully evaluate requirements and supplier before buying in packages. Involve the effected team members in the evaluation since they will be the ones who know what's best for them. <heading>5. Recommendations</heading><heading>Maintenance</heading>The newly installed system is functioning as expected without any technical glitches (wow!). However once the new system has survived its post implementation review, there is much work to be done. There's hardly any system I have heard of that required changes once it's installed due to the dynamic changes in the business operations. This is where continued maintenance (and business) comes in. Two major areas can be identified in the maintenance stage: <list>Implementing change to the system Ensuring that the system continues to meet the user's needs</list>All required changes to the installed system must, be subjected to the full procedures of the system development life cycle. Therefore, a change-control mechanism must be implemented to ensure that the responsible management insist that each change be installed in a manner that minimizes disruption and is essentially invisible to the user of the system. The deliverables and QA activities in the maintenance are: <list>Detailed log of changes to the system.Copies of regular reviews and verifications of the service level agreement.Copies of regular post implementation review reports.</list><heading>If the system cannot be delivered in time</heading>If non of the recommended activities can be done to reduce the timescale then, simply, job cannot be done. It is my responsibility as a team member to project the truth (however much the project manager doesn't want to hear it) so project goals can be achieved. It would be unprofessional and a disservice to mislead management into believing that the project can meet the schedule when you know you cannot. So there are two choices: Either decline the project or accept it. If the project is to be decline the project, the management should be convinced of it's good reasons. If the project is to be accepted, the management should be aware of the magnitude of the task and the likelihood of failure. Above all, the project manager and team leaders should be aware and are willing to accept-what will happen if it fails especially after recommendations were given by the engineer(s). This project (in fact software project), however large it is or however much of hiccups occur, can be successfully managed if proper software project management principles are applied i.e. product delivered on time and to expected quality. By looking at the past successful projects, industry experience and the quality control techniques used by OPUS, it is in my opinion that the chances of this project being successful is very realistic. <heading>Reflections</heading><heading>a) Reflections as a software developer</heading>Usage of COCOMO II, critical path, FPA, risk assessment are widely used in the IT industry. Calculations are complex and can easily make mistakes which can escalate to bring the whole project to fail. The importance of constant verification with the partner (i.e. colleagues in the work place) was learned during the assignment....the hard way since we both of us somehow managed to get the initial estimate wrong. In the industry project managers are highly respected. "They ensure that project managers have a clear and desirable career path that includes training, promotion criteria, recognition of achievement, and the opportunity to progress to the highest executive levels in the organization. Furthermore, such companies, by their recognition of project management, acknowledge that project management is a discipline, that it is needed, and that it is worthy of fostering" Although software project management isn't my field and while resisting the temptation of changing the field to software project management (£2400/week pay rate!!), it inspired me to learn more about project management which I think is a very interesting and useful in the general management area. <heading>b) Reflections as a student</heading>This is a very interesting module other than the fact that I personally think we had too much of COCOMO II calculations in the 1 st assignment. At first I was sceptical about the contents about their practicality. But I later found out, while doing research, the contents closely match with what's actually used in the software development processors. This made me more interested in the module. Further more I learned that this is just the tip of the iceberg. The more interesting topics such as microplanning, manageing subcontractors and clients, team building, managing scope changes, etc are yet to be learned. And all this time I have been involved in software projects without any knowledge of these techniques. There was no exam in this module and was too naively to think it would be a piece of cake. But time management, group work and extensive reading were a big challenge especially while having other assignment and coursework commitments. But the rewarding feeling that all the work is worthwhile and the confidence that I'm better armed for the IT wars is priceless. The module is officially completed but there's more project management reading up to be done. 