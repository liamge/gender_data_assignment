<heading>In Brief</heading>The game that we have decided upon is a waterfall model based game. The board will be split into five levels, each of which will get progressively higher, and riskier than the one below. Unlike in the waterfall model, the later stages - i.e. testing and maintenance will be located 'physically' above the earlier levels. The aim is to progress through the earlier levels, completing tasks, improving your development team and making important choices about the development process, until eventually, you reach the release - the maintenance level. He who has amassed the greatest number of points then wins the game. The points came from a range of things which are calculated when you finish - the amount of cash you have, the quality of your development team and the speed with which you completed the game. Competition comes in from other development houses, seeking to gather the best programmers for their own projects, rushing to get out competing software and fighting tooth and nail for stakeholder's money. <figure/><heading>Features</heading>In total there will be eleven different types of tile upon the board, three types of card - programmer, chance and backup, up to six player pieces, six sets of coloured pins, one die and many wads of cash. Following this is a brief description of each of these that need explaining, their purpose in the game, alongside any necessary details and available images. <heading>The Board:</heading>As stated above, the board will be split into five different levels; each tiered above the earlier one. The board will be constructed of the hard board as stated as available by Rachael. People will navigate the board in a clockwise manner, moving up and down between levels using the up and down tiles. Each level shall be split into a number of tiles. Here is shown the manner in which they shall be laid out: <figure/><heading>Tiles:</heading><heading>Start Square:</heading>At the beginning of the game, all players should lay their pieces inside the start square. The highest roller will then initiate a clockwise rotation around the board based on their second roll. Following this it has no further significance and can be considered a 'safe' square. <heading>Move Up Square:</heading>When you land on this square you have the choice of moving up a level. Each one of these tiles will have six holes drilled into the top of it. The first time you move up each level having completed all compulsory tasks for that level, you must collect an amount of cash (to be decided after prototyping) from the bank and place one of your coloured pegs inside one of the holes. <heading>Move Down Square:</heading>When you move on this square you can move down to the same square on the level below. <heading>Bug Square:</heading>When you land on a bug square, you must wait in that square for three turns, or roll a double to escape. <heading>Crash Square:</heading>When you land on a crash square you must go down to the Move Down tile on the level below, or forsake a backup card. <heading>Chance Square:</heading>When you land on a chance square you can either choose not to do anything, or pick up a chance card. See Chance Cards. <heading>Trade Square:</heading>Unless you wish to obtain a new programmer or backup card, you can just ignore this tile. If you wish to get a new backup card then you must swap one of your programmer cards for one with the management. If you wish to get a programmer card then you must specify whether you wish to buy it from the management or from a particular player. You then have the choice of buying a random card from either, or buying a particular card. If the purchase is from the management, then the employment cost of each programmer is specified for direct purchases. The cost for purchasing a random programmer from the management though is Â£X (As yet unspecified) - and thus quite a gamble. The same kind of rules exist for trade with other players, just the player you are going to purchase of specifies the amount for both individual purchases and random ones. For random purchases, all available programmer cards should be well shuffled before being sold. <heading>Compulsory Task Square:</heading>Task squares will vary, all of them will have six holes drilled into them though.. They will specify on their tiles what you will have to do to complete the tasks - some will require that you have already completed a prior task. Some will simply require rolls of the dice, some will require payments to complete, some will have requirements on the number, skill and type of programmers that you have. The completion of all compulsory task squares is obligatory though - not necessarily the first time you land on them, but to finish the game. You should use your pegs to mark of the completion of a task square. Here are some examples of tasks:  FORMULA  <heading>Optional Task Square:</heading>These are essentially the same as compulsory task squares but without being compulsory. Higher level optional tasks may require that you have completed other optional tasks, but it won't be required to complete the game.The benefit of completing them is that they will confer some advantage - but not without some counterbalancing disadvantage or risk. Some of these may only be completable by one player, but most will be completable by anyone that wishes to and thus can have up to six holes drilled into it. Here are some examples of optional tasks:  FORMULA  <heading>Choice Square:</heading>When you land on a choice you there and then have to make a decision that will affect the rest of the game. There will be six holes drilled down each side of this tile. You will be presented with two options, and you must place your peg into the choice side you wish to go with. This choice will not be changeable, and will have consequences such as the availability of certain optional tasks. Here are some examples of choices:  FORMULA  <heading>Tax square:</heading>When you land on one of these squares you must pay the amount specified by on the tile. This amount will vary between tiles. <heading>Finish Square:</heading>The finish square is located in the centre of the board. It is a form of task square, which requires that all prior compulsory tasks have been completed. A suitably cunning task has not yet been devised. <heading>Cards:</heading><heading>Programmer Cards:</heading>You obtain programmer cards at the start of the game. All of your cards must be displayed clearly in front of you throughout the game. See the Trade Square for information on how cards are swapped and purchased throughout the game. Each programmer will have his speciality type of application (game, web, OS or application), they will have details on where they have worked in the past (programmer will be taken from real life) and a programmer ranking score. It will generally be better for you to have high scoring programmers whose specialities match that of your company. INSERT PICTURE OF PROGRAMMER CARD <heading>Backup Cards:</heading>These will be brought while on trade squares by trading a programmer. They are used to avoid the effects of crash squares - something very important in the tenser parts of the game. <figure/><heading>Chance Cards:</heading>Chance cards will have a range of effects, both positive and negative. Many will have both good and bad sides, depending on the choices you made in the game so far, and the tasks you have thus far completed. Here are some examples of chance cards: If you have completed all optional tasks so far, Manager is pleased with current progress and grants extra funds to project If developing an Operating System: New version of competing system released - management steps up funding. Take a new programmer card. Programmers receive extra training - get 10 points for each programmer you have Backup server crashes - Unless you choose to have programmer pairs, loose all backup cards If you have a programmer with ranking over 80: 'Talent' scout offers your programmers higher salary, either loose your programmer or pay to keep them on INSERT EXAMPLE PICTURE OF CHANCE CARDS <heading>Player Pieces:</heading>These will be small circular pieces, capable of being placed into small plastic holders. They will have the name of a company on one side, and the logo of the company on the other. The player piece will be pulled out of a bag at the start of the game, this will have the effect of forcing the player to have a certain speciality, potentially pitting them against another player for programmer cards. <heading>Rules of the Game</heading>One player should be elected as "manager", who will henceforth be in charge of dealing out cash and programmer cards. When you start the game you must select a company piece from the bag and slid the company's marker into your holder - this is now your playing piece. Each company comes with its own speciality which will have relevance throughout the game (read more under specialities). The manager should then deal each player a selection of five random programmer cards, X amount of cash and 20 coloured pegs. All playing pieces should then be placed on the start square, located on the first level. The dice should then be rolled by each player, and then who ever has the highest role starts the game. Each player takes their turn to roll the dice, progressing around the board in a clockwise direction. Their next action depends on which square they land on - unless the consequences of that square is that they should not move during the next turn, then they should pass the die on and wait till their next turn. To win the game you must complete the final task. Your score should then be calculated based on; amount of cash, number of programmers, programmer specialities and speed of development (in relation to other players). Two alternate ways of winning/playing the game are the "last man standing" and "poker" rules. The last man standing rules work by making it so you cannot go down a level and eliminating the last player to reach each level. This way only one player is actually able to reach the top and automatically wins. The poker rules are a modification on the last man standing rules, whereby, someone that got kicked out earlier in the game could still beat the person who got to the top - if they had more points than them. This would only work on the basis that the risk occurred by going up each level increased greatly. <heading>Justification</heading>I feel that we are well justified in developing this game on the grounds that we have covered many different facets of software engineering. In the most obvious sense we have gone for a waterfall model based design, but within that there is much more. It will be possible to have the iteration between levels of the waterfall, which was added to the model later on, due to the ability to choose to move up and down between levels. On each level there will be things to do with software engineering practises relevant to that stage, coming through in the form of tasks and choice squares. For instance, an example of a choice square for the design level would be whether to use a structured design methodology, which may require you to complete all the optional tasks, or use a RAD methodology which might require greater programmer skill but less tasks needing doing. Because there will be things such as chance cards which might pop up and make life a lot easier if you had made a certain choice or performed a certain task, players will get a better concept of whether they like taking that kind of risk in real projects. We will be trying to set the game up so this facet of play really does come through. On top of all that we have also tried to take a side-swipe at the business and management side of software engineering in the form of having the programming teams, trading of workers, resource management etc. By having competing teams, some maybe racing to get there first, others maybe taking it slow and steady, building up cash supplies and taking on every optional task, we hope to highlight that there is not right or wrong way to go about software engineering but only possible ways. <heading>Design History</heading>The game started off as a monopoly based game, where tasks would be bought and everything done in very much a monopoly style way. We discovered that many people were going about a similar style project and decided to be more ambitious and original Considered changing it into a form of drinking game where you drink when you land on someone else's "property" Were told not to make a drinking game We decided tasks should require actually doing something, instead of just being brought. The original idea that arose was using questions. We decided against questions, as there weren't that many you could really ask. The idea of having pseudo-random tasks being performed came up, along with the idea of having choices. We decided that we wouldn't have money in the game as it would unnecessarily complicate things and there wasn't much point for it. Programmer cards were brought up as a way to add some element of having to prepare for harder tasks. The idea of a 3D board came up Backup cards were originally suggested but with little purpose but got accepted in Reaching the centre first was decided as the method of winning the game Having programmer specialities was decided on as a way to enhance competitiveness between players Decision to create lots of new tiles as the game was quite dull only having tasks and choices Trade squares were added as a way to formalize buying/selling cards Backup cards were phased out as pointless Cash came back, as we needed to buy/sell programmer cards, pay for tasks and choices etc - it now had a purpose Chance cards were brought in as a way to add random fun Two alternative methods of winning, being the last man standing and poker rules were suggested It was decided that last man standing and poker rules would be best of kept as alternate rules and that winning should instead be based on calculating points A combo of Crash Bug squares was thought up as a way to add penalties to the game Crash and Bug squares were separated to make each square less complicated Backup cards were brought back in as a solution to crash cards Tax squares were thought up as a way to dispose of cash Up/Down squares were formalized as the way to move between levels Minor rules filled out when rule book was written The number of tiles on each level and the layout of the board was decided Decision to make 3D models to test out board textures made The idea of a 3D triangular board was brought up, and voted against due to the large amount of work already gone into square board, and the waste of material that would result from use of the triangle [see Square v Triangle] 